# Opening datasets in R
```{r setup3}
#| echo: false
#| message: false
#| warning: false
library(dplyr)
library(Hmisc)
library(ggplot2)
library(haven)
```
## Importing files: essential information

### Spreadsheet and text files {-}

In principle, any  dataset whether in CSV, or spreadsheet format can be imported into R: 

- CSV files can be directly imported with read.csv() from Base R.
- MS Excel spreadsheets can be opened with the `read_excel()` function from the [readXL](https://readxl.tidyverse.org/) package or opened/written with `read.xlsx()` and `write.xlsx()` from the [xlsx](https://www.rdocumentation.org/packages/xlsx/versions/0.6.5) package.  

- ODS (Open Document Spreadheets)  files  from LibreOffice/OpenOffice Calc can be opened and written with `read_ods()/write_ods()` from the [readODS](https://docs.ropensci.org/readODS/) package.


### SAS, SPSS, or Stata {-}

Currently, the `haven` packages provides the most versatile and straightforward route  to importing data from other mainstream statistical software. SPSS, Stata and SAS files can be opened with respectively `read_spss()`, `read_dta()` and `read_sas()`. The only potential downside is that it relies on ad hoc data formats and data structures for converting labelled categorical variables and attempts to mimic SPSS/Stata's value and variable labels. More information is available [here](https://haven.tidyverse.org/reference/read_dta.html). We will be using `haven` throughout this guide. 

For the record, the `foreign` package used to be the standard for importing MINITAB, SAS, SPSS and Stata datasets into R, but its development ceased in 2000 (Stata version 12).

## The 2017 British Social Attitudes Survey
In the remainder of this guide, we will be using the *British Social Attitudes Survey, 2017, Environment and Politics: Open Access Teaching Dataset*, which can be downloaded from the [UK Data Service website](https://beta.ukdataservice.ac.uk/datacatalogue/studies/study?id=8849). We will import  the   SPSS version of the dataset, We will import the SPSS version of the dataset. We will  assume that the data   is saved in a  folder named `UKDA` inside the `Documents` folder (on a Windows computer).  We will set
. `C:\\Users\\Your_User_Name_Here\\Documents` as the default working directory. 

This way, we won’t have to specify the full path each time that we will be opening or saving file.  


```{r 3.1}
#| eval: false 
setwd("C:\\Users\\Your_User_Name_Here\\Documents\\UKDS")
```


We can finally open the file:
  
```{r 3.2}
#| echo: -1
setwd("~/Data/bsa/")
bsa<-read_spss("8849spss_V1/bsa2017_open_enviropol.sav"
               )
```
Typing:

```{r 3.4}
ls()
```

will show us that the object ‘bsa’ has appeared in the environment.

##  Understanding the dataset
As mentioned in earlier sections, we can find out the number of observations and variables in the dataset by typing the following:
  
```{r 3.3}
dim(bsa)
```

We can see that there are `r nrow(bsa)` observations and `r ncol(bsa)` variables in the dataset.

What if we want to get the list of all variables in the dataset?  We need to type:
```{r 3.5}
ls(bsa)
```

If we want to get a better sense of the data, we use the `head()`  function which will return the first six rows.
```{r 3.6,echo=c(3)}
t<-bsa
bsa<-as.data.frame(t)
head(bsa)
bsa<-t
```



Single variables may be also summarised with `head()`. 

For example: 

```{r 3.7, echo=-1}
bsa$Rsex<-as_factor(bsa$Rsex)
head(bsa$Rsex)
```

displays the first six observations of  `Rsex` (gender of respondents).  

Simply typing the name of a variable as in:  

```
bsa$Rsex
```
will list its first 1000 observations.  

Other commands, such as `summary()` provide more synthetic information.  

```{r 3.8}
summary(bsa$Rsex)
```

`summary()` is a generic function that tailors the most appropriate output  to an object class. Since `Rsex` is a categorical variable, the output of `summary()` is identical to what we would have obtained with the  straightforward tabulation function `table()`:
  
```{r 3.9}
table(bsa$Rsex)
```

When encountering a numeric variable, `summary()` will compute  basic descriptive statistics (mean, median, quartiles, maximum and minimum). For example, in the case of the libertarian-authoritarian scale `libauth`:  
  
```{r 3.10}
summary(bsa$libauth)
```


##  Identifying and selecting variables
As we have already seen, variables are objects. R automatically stores variables using the appropriate object class. Categorical variables are ‘Factors’ with ‘Levels’ as categories within these, while continuous variables are ‘Numeric’ types of objects.
The `class()` displays the type of an object:.

```{r 3.11}
class(bsa$Rsex)
```

The levels() function returns the categories of the variable.
```{r 3.12}
levels(bsa$Rsex)
```

## Factor variables in the haven package

As we have seen  in the previous chapter, statistical software such as SPSS or Stata treat categorical variables as numerical variables. Values labels are then 'attached',  allocating  a  substantive meaning to these values.
On the other hand, R records  categorical variables in objects that are called *factors*,  that  may be ordered or not.  Factors consist of a limited number of *levels* sequentially numbered values (ranging from 1 to the number of levels) that are paired with  arbitrary character strings. The number of a factor level is therefore distinct from the values categorical variables are allocated in codebooks. 


Unfortunately, there are no straightforward ways to convert SPSS or Stata labelled categorical variables into R factors. The  approach followed by the `haven` package   is to preserve the  arbitrary numeric values of the original variables, and add *attributes* that  contain the value labels that  can be manipulated separately. Attributes are a special type of R objects that have a name, and can be retrieved using the `attr()` function. `haven`-converted categorical variables all have a 'label' and 'labels' attribute. The former is the variable description aka variable label, the latter the value labels.

Let's examine the original variable description and value labels with the `attr()` function.


```{r 3.13}
attr(bsa$HEdQual3, "label")
```

We do the same with value labels:

```{r 3.14}
attr(bsa$HEdQual3, "labels")
```

The value labels displayed above include both the text description and the original  (i.e. codebook) numeric values from SPSS/Stata.

These `haven`-imported numeric variables can be converted into R factors using `as_factor()`, with their numeric values simply reflecting their order in the vector of levels. The factor levels in the converted variables can consist of either the value labels:

```{r 3.15}
levels(
       as_factor(bsa$HEdQual3, levels="labels")
       )
```

... or, as in the earlier output, of both the  original SPSS/Stata numeric values and the value labels:

```{r 3.17}
levels(
       as_factor(bsa$HEdQual3, levels="both")
       )
```




\newpage
